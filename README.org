[[https://github.com/HenryS1/herodotus/tree/master][https://github.com/HenryS1/herodotus/actions/workflows/ci.yaml/badge.svg]]

* Herodotus

** Basic usage

This library provides a macro that generates JSON serialisation and
deserialisation at the same time as defining a CLOS class.

For example the below definition creates a CLOS class with two fields
~x~ and ~y~ which have obvious accessors (~x~ and ~y~) and initargs
(~:x~ and ~:y~). 
#+begin_src lisp
CL-USER> (herodotus:define-json-model point (x y))
#+end_src

It also defines a package named ~point-json~ with a function for
parsing json ~point:from-json~ and also implements a generic method
for writing to json in the herodotus package.

#+begin_src lisp
CL-USER> (defvar *point* (point-json:from-json "{ \"x\": 1, \"y\": 2 }"))
*POINT*
CL-USER> (x *point*)
1
CL-USER> (y *point*)
2
CL-USER> (herodotus:to-json *point*)
"{\"x\":1,\"y\":2}"
#+end_src



** Dependencies

The project depends on YASON which does the json parsing and
serialisation under the hood and CL-PPCRE for text manipulation during
code generation.

** License

This project is provided under the MIT license. See the LICENSE file for details.
